use rustlock_core::RustLock;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // These values would normally be generated by the `rustlock-admin` tool
    // and copied into your application.
    let license_public_key = "YOUR_LICENSE_PUBLIC_KEY".to_string();
    let machine_key = "YOUR_MACHINE_KEY".to_string();
    let info_private_key = "YOUR_INFO_PRIVATE_KEY".to_string();

    // Example list of blocked customer IDs
    let blocked_customers = vec![9999u16];

    // Typically you would use the version of your application here
    let version = env!("CARGO_PKG_VERSION").to_string();

    // Initialise RustLock
    let lock = RustLock::new(
        license_public_key,
        blocked_customers,
        version,
        machine_key,
        info_private_key,
    )?;

    // Expect the license string as the first CLI argument
    let args: Vec<String> = std::env::args().collect();
    if args.len() < 2 {
        eprintln!("Usage: simple <LICENSE_STRING>");
        std::process::exit(1);
    }
    let license_string = &args[1];

    // Validate the license. If validation fails an error is returned.
    let license = lock.validate_license(license_string)?;

    // Now you can check the feature flags from the license
    println!("License validated for: {}", license.name);
    println!("Feature 1 enabled: {}", license.f1);
    println!("Feature 2 enabled: {}", license.f2);
    println!("Feature 3 enabled: {}", license.f3);
    println!("Feature 4 enabled: {}", license.f4);
    println!("Feature 5 enabled: {}", license.f5);

    Ok(())
}
